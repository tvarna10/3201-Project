// ============================================================================
//   Ver  :| Author					:| Mod. Date :| Changes Made:
//   V1.1 :| Alexandra Du			:| 06/01/2016:| Added Verilog file
// ============================================================================


//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

`define ENABLE_ADC_CLOCK
`define ENABLE_CLOCK1
`define ENABLE_CLOCK2
`define ENABLE_SDRAM
`define ENABLE_HEX0
`define ENABLE_HEX1
`define ENABLE_HEX2
`define ENABLE_HEX3
`define ENABLE_HEX4
`define ENABLE_HEX5
`define ENABLE_KEY
`define ENABLE_LED
`define ENABLE_SW
`define ENABLE_VGA
`define ENABLE_ACCELEROMETER
`define ENABLE_ARDUINO
`define ENABLE_GPIO

module DE10_LITE_Golden_Top(

	//////////// ADC CLOCK: 3.3-V LVTTL //////////
`ifdef ENABLE_ADC_CLOCK
	input 		          		ADC_CLK_10,
`endif
	//////////// CLOCK 1: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK1
	input 		          		MAX10_CLK1_50,
`endif
	//////////// CLOCK 2: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK2
	input 		          		MAX10_CLK2_50,
`endif

	//////////// SDRAM: 3.3-V LVTTL //////////
`ifdef ENABLE_SDRAM
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,
`endif

	//////////// SEG7: 3.3-V LVTTL //////////
`ifdef ENABLE_HEX0
	output		     [7:0]		HEX0,
`endif
`ifdef ENABLE_HEX1
	output		     [7:0]		HEX1,
`endif
`ifdef ENABLE_HEX2
	output		     [7:0]		HEX2,
`endif
`ifdef ENABLE_HEX3
	output		     [7:0]		HEX3,
`endif
`ifdef ENABLE_HEX4
	output		     [7:0]		HEX4,
`endif
`ifdef ENABLE_HEX5
	output		     [7:0]		HEX5,
`endif

	//////////// KEY: 3.3 V SCHMITT TRIGGER //////////
`ifdef ENABLE_KEY
	input 		     [1:0]		KEY,
`endif

	//////////// LED: 3.3-V LVTTL //////////
`ifdef ENABLE_LED
	output		     [9:0]		LEDR,
`endif

	//////////// SW: 3.3-V LVTTL //////////
`ifdef ENABLE_SW
	input 		     [9:0]		SW,
`endif

	//////////// VGA: 3.3-V LVTTL //////////
`ifdef ENABLE_VGA
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,
`endif

	//////////// Accelerometer: 3.3-V LVTTL //////////
`ifdef ENABLE_ACCELEROMETER
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,
`endif

	//////////// Arduino: 3.3-V LVTTL //////////
`ifdef ENABLE_ARDUINO
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,
`endif

	//////////// GPIO, GPIO connect to GPIO Default: 3.3-V LVTTL //////////
`ifdef ENABLE_GPIO
	inout 		    [35:0]		GPIO
`endif
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

reg [7:0] HEX5VALUE;
reg [7:0] HEX4VALUE;
reg [7:0] HEX3VALUE;
reg [7:0] HEX2VALUE;
reg [7:0] HEX1VALUE;
reg [7:0] HEX0VALUE;

wire [7:0] win5; // wire values for HEX5 given in the case of a win
wire [7:0] win4; // wire values for HEX4 given in the case of a win
wire [7:0] win3; // wire values for HEX3 given in the case of a win
wire [7:0] win2; // wire values for HEX2 given in the case of a win

wire [7:0] lose5; // wire values for HEX5 given in the case of a loss
wire [7:0] lose4; // wire values for HEX4 given in the case of a loss
wire [7:0] lose3; // wire values for HEX3 given in the case of a loss
wire [7:0] lose2; // wire values for HEX2 given in the case of a loss

wire [7:0] round1num1; // wire spin 1 number values from round 1
wire [7:0] round1num2; // wire spin 2 number values from round 1	
wire [7:0] round1num3; // wire spin 3 number values from round 1
wire [7:0] round1points;

wire [7:0] round2num1; // wire spin 1 number values from round 2
wire [7:0] round2num2; // wire spin 2 number values from round 2
wire [7:0] round2num3; // wire spin 3 number values from round 2
wire [7:0] round2points;

wire [7:0] round3num1; // wire spin 1 number values from round 3
wire [7:0] round3num2; // wire spin 2 number values from round 3
wire [7:0] round3num3; // wire spin 3 number values from round 3
wire [7:0] round3points;

reg [7:0] displaypoints; // create array for points
wire [3:0] displayones;  // wire value of ones to be displayed
wire [3:0] displaytens;  // wire value of tens to be displayed

wire [7:0] round12points;  // wire in the total points of round 1 and 2 after adding them together
wire [7:0] round123points; // wire in the total points of rounds 1, 2, and 3 after adding them together

reg [3:0] onescounter;
reg [3:0] tenscounter;

reg [9:0] LEDROUTPUT;
reg win;
reg lose;

//=======================================================
//  Structural coding
//=======================================================

// instantiate the clocks for the game speeds
mediumspin m1(MAX10_CLK1_50, cout1);
fastspin(MAX10_CLK1_50, cout2);

// instantiate rounds
// used to get the number of every spin in every round to be displayed on the HEXs
// used to get the awarded points of every round to be displayed on the HEXs
// provides the reset switch, round determining switches, spin switch, game speed switches as well as switches that were used for test cases
round1 r1(MAX10_CLK1_50, round1num1, round1num2, round1num3, round1points, !SW[0], SW[9], KEY[1], SW[2], SW[1], SW[5]);
round2 r2(MAX10_CLK1_50, round2num1, round2num2, round2num3, round2points, !SW[0], SW[8], KEY[1], SW[2], SW[1], SW[4]);
round3 r3(MAX10_CLK1_50, round3num1, round3num2, round3num3, round3points, !SW[0], SW[7], KEY[1], SW[2], SW[1], SW[3]);

// instantiate to take the points and split it into its ones and tens for display purposes
total(displaypoints, displayones, displaytens);

// instantiate adders to add score
eightbitadder sum1(round1points, round2points, 0, round12points, cout); // adds points from rounds 1 and 2
eightbitadder sum2(round12points, round3points, 0, round123points, cout); // adds points from rounds 1, 2, and 3

// instantiate results for animations
win(cout2, win, win5, win4, win3, win2);
lose(cout2, lose, lose5, lose4, lose3, lose2);

//================================================================================================================//

// initialize starting values 
initial begin
	onescounter <= 4'b0000;
	tenscounter <= 4'b0000;
	LEDROUTPUT <= 10'b0000000000;
	win <= 1'b1;
	lose <= 1'b1;
	HEX2VALUE <= 8'b11111111;
end

always @(posedge cout1) begin

	if (!SW[0]) begin // if switch zero is not up, the game is "off"
							// set HEX displays, points and result statuses off
	
		HEX5VALUE = 8'b10111111;
		HEX4VALUE = 8'b10111111;
		HEX3VALUE = 8'b10111111;
		HEX2VALUE = 8'b10111111;
		displaypoints = 8'b00000000;
		LEDROUTPUT = 10'b0000000000;
		win <= 1'b0;
		lose <= 1'b0;
	end
	else begin // if switch zero is up, the game is "on"

	case ({SW[9], SW[8], SW[7]}) // show values based off what round is being played
	
		3'b000: begin // if user has not started playing, all displays are set to zero
			HEX5VALUE = 8'b11000000;
			HEX4VALUE = 8'b11000000;
			HEX3VALUE = 8'b11000000;
			HEX2VALUE = 8'b11111111;
			displaypoints = 8'b00000000;
		end
		
		3'b100: begin // if user has started round 1
			HEX5VALUE = round1num1; // display number 1 of round 1 onto HEX5 display
			HEX4VALUE = round1num2; // display number 2 of round 1 onto HEX4 display
			HEX3VALUE = round1num3; // display number 3 of round 1 onto HEX3 display
			HEX2VALUE = 8'b11111111; // HEX2 is off (only used in the "LOSE" animation

		end
		
		3'b110: begin // if user has started round 2
			HEX5VALUE = round2num1; // display number 1 of round 2 onto HEX5 display
			HEX4VALUE = round2num2; // display number 2 of round 2 onto HEX4 display
			HEX3VALUE = round2num3; // display number 3 of round 2 onto HEX3 display
			HEX2VALUE = 8'b11111111; // HEX2 is off (only used in the "LOSE" animation

		end	
		
		3'b111: begin // if user has started round 3
			HEX5VALUE = round3num1; // display number 1 of round 3 onto HEX5 display
			HEX4VALUE = round3num2; // display number 2 of round 3 onto HEX4 display
			HEX3VALUE = round3num3; // display number 3 of round 3 onto HEX3 display
			HEX2VALUE = 8'b11111111; // HEX2 is off (only used in the "LOSE" animation

		end
		
	endcase

//===========================================================================================================//
//===========================================================================================================//
	
	case ({SW[9], SW[8], SW[7], SW[6]}) // display users points based on what round they are playing
	
		4'b0000: begin // if user has not started playing, the points are intialized to zero
			displaypoints = 8'b00000000;
		end
		
		4'b1000: begin // if user is in round 1
			displaypoints = round1points; // display the points awarded in round 1
													// since points arent awarded until all numbers have been chosen, this will not appear until the end of round 1
		end
		
		4'b1100: begin // if user is in round 2
			if (round12points > 8'd98) begin // if the user is able to win in round 2 and score 99 points or more
			
				displaypoints = 8'd99; // display 99 points -> game only goes to 99
				
				LEDROUTPUT <= ~LEDROUTPUT; // flash the LEDs
				win <= ~win; 					// toggle the "win" state, used to flash the winning animation
				HEX5VALUE <= win5;         // display winning animation on HEX5
				HEX4VALUE <= win4;	      // display winning animation on HEX4
				HEX3VALUE <= win3;			// display winning animation on HEX3
				HEX2VALUE <= win2;			// display winning animation on HEX2

			end
			else begin
				displaypoints = round12points; // if user does not reach 99 or more points within 2 rounds, display the points accumulated over rounds 1 and 2
														 // since points arent awarded until all numbers have been chosen, this will not appear until the end of round 2
			end
		end
		
		4'b1110: begin // if user is in round 3
			if (round123points > 8'd98) begin // if the user is able to win in round 3 and score 99 points or more
			
				displaypoints = 8'd99; // display 99 points -> game only goes to 99
				
				LEDROUTPUT <= ~LEDROUTPUT; // flash the LEDs
				win <= ~win;					// toggle the "win" state, used to flash the winning animation
				HEX5VALUE <= win5;         // display winning animation on HEX5
				HEX4VALUE <= win4;	      // display winning animation on HEX4
				HEX3VALUE <= win3;			// display winning animation on HEX3
				HEX2VALUE <= win2;			// display winning animation on HEX2	
			
			end
			else begin
				displaypoints = round123points; // if user does not reach 99 or more points within 2 rounds, display the points accumulated over rounds 1, 2, and 3
														  // since points arent awarded until all numbers have been chosen, this will not appear until the end of round 3
			end
		end
		
		4'b1111: begin // all rounds have been played, flip switch 6 for a "win" or "lose" animation
		
			if (round123points > 8'd98) begin // if the user wins
			
				displaypoints = 8'd99; // display 99 points -> game only goes to 99
				
				LEDROUTPUT <= ~LEDROUTPUT; // flash the LEDs
				win <= ~win;					// toggle the "win" state, used to flash the winning animation
				HEX5VALUE <= win5;         // display winning animation on HEX5
				HEX4VALUE <= win4;	      // display winning animation on HEX4
				HEX3VALUE <= win3;			// display winning animation on HEX3
				HEX2VALUE <= win2;			// display winning animation on HEX2	
		
			end
			else if (displaypoints < 8'd99) begin // if the user loses
			
				lose <= ~lose; 				// toggle "lose" state
				HEX5VALUE <= lose5;			// display losing animation on HEX5
				HEX4VALUE <= lose4;			// display losing animation on HEX4
				HEX3VALUE <= lose3;			// display losing animation on HEX3
				HEX2VALUE <= lose2;			// display losing animation on HEX2
			end
		end
		
	endcase
	
//===========================================================================================================//

// this block of code will have the points to be displayed be counted on the display instaed of just showing up as is
// for example: if the points awarded was 15, it will count up to 15 instead of just showing 15 right away

	if (onescounter < displayones) begin // if onescounter is less than ones value to be displayed
		onescounter <= onescounter + 1; // increment onescounter by 1 until it equals the ones value to be displayed
	end
	
	else if (onescounter > displayones) begin // if onescounter is greater than ones value to be displayed
		onescounter <= onescounter - 1; // decrement onescounter by 1 until it equals the ones value to be displayed
	end
	
	else begin
		onescounter <= onescounter; // if they are already equal, do nothing
	end
	
	if (tenscounter < displaytens) begin // if tesncounter is greater than tens value to be displayed
		tenscounter <= tenscounter + 1; // increment tenscounter by 1 until it equals the tens value to be displayed
	end
	else if (tenscounter > displaytens) begin // if tenscounter is greater than tens value to be displayed
		tenscounter <= tenscounter - 1; // decrement tenscounter by 1 until it equals the tens value to be displayed
	end
	else begin
		tenscounter <= tenscounter; // if they are already equal, do nothing
	end
	
end

//===========================================================================================================//

// this block of code is responsible for actually displaying the score
// the 8 bits of the HEX displays are given a value based off the bits of the ones and tens counters
// values of these were based off a truth table to determine what hex bits turned on for a given 4 bit binary number 
	
	HEX0VALUE[0] = ~((~onescounter[3] & ~onescounter[2] & onescounter[1] & ~onescounter[0]) | (~onescounter[3] & ~onescounter[2] & onescounter[1] & onescounter[0]) | (~onescounter[3] & onescounter[2] & ~onescounter[1] & onescounter[0]) | (~onescounter[3] & onescounter[2] & onescounter[1] & ~onescounter[0]) | (~onescounter[3] & onescounter[2] & onescounter[1] & onescounter[0]) | (onescounter[3] & ~onescounter[2] & ~onescounter[1] & ~onescounter[0]) | (onescounter[3] & ~onescounter[2] & ~onescounter[1] & onescounter[0]) | (onescounter[3] & ~onescounter[2] & onescounter[1] & ~onescounter[0]) | (onescounter[3] & onescounter[2] & ~onescounter[1] & ~onescounter[0]) | (onescounter[3] & onescounter[2] & onescounter[1] & ~onescounter[0]) | (onescounter[3] & onescounter[2] & onescounter[1] & onescounter[0]) | (~onescounter[3] & ~onescounter[2] & ~onescounter[1] & ~onescounter[0]));
	HEX0VALUE[1] = ~((~onescounter[3] & ~onescounter[2] & ~onescounter[1] & onescounter[0]) | (~onescounter[3] & ~onescounter[2] & onescounter[1] & ~onescounter[0]) | (~onescounter[3] & ~onescounter[2] & onescounter[1] & onescounter[0]) | (~onescounter[3] & onescounter[2] & ~onescounter[1] & ~onescounter[0]) | (~onescounter[3] & onescounter[2] & onescounter[1] & onescounter[0]) | (onescounter[3] & ~onescounter[2] & ~onescounter[1] & ~onescounter[0]) | (onescounter[3] & ~onescounter[2] & ~onescounter[1] & onescounter[0]) | (onescounter[3] & ~onescounter[2] & onescounter[1] & ~onescounter[0]) | (onescounter[3] & onescounter[2] & ~onescounter[1] & onescounter[0]) | (~onescounter[3] & ~onescounter[2] & ~onescounter[1] & ~onescounter[0]));
	HEX0VALUE[2] = ~((~onescounter[3] & ~onescounter[2] & ~onescounter[1] & onescounter[0]) | (~onescounter[3] & ~onescounter[2] & onescounter[1] & onescounter[0]) | (~onescounter[3] & onescounter[2] & ~onescounter[1] & ~onescounter[0]) | (~onescounter[3] & onescounter[2] & ~onescounter[1] & onescounter[0]) | (~onescounter[3] & onescounter[2] & onescounter[1] & ~onescounter[0]) | (~onescounter[3] & onescounter[2] & onescounter[1] & onescounter[0]) | (onescounter[3] & ~onescounter[2] & ~onescounter[1] & ~onescounter[0]) | (onescounter[3] & ~onescounter[2] & ~onescounter[1] & onescounter[0]) | (onescounter[3] & ~onescounter[2] & onescounter[1] & ~onescounter[0]) | (onescounter[3] & ~onescounter[2] & onescounter[1] & onescounter[0]) | (onescounter[3] & onescounter[2] & ~onescounter[1] & onescounter[0]) | (~onescounter[3] & ~onescounter[2] & ~onescounter[1] & ~onescounter[0]));	
	HEX0VALUE[3] = ~((~onescounter[3] & ~onescounter[2] & onescounter[1] & ~onescounter[0]) | (~onescounter[3] & ~onescounter[2] & onescounter[1] & onescounter[0]) | (~onescounter[3] & onescounter[2] & ~onescounter[1] & onescounter[0]) | (~onescounter[3] & onescounter[2] & onescounter[1] & ~onescounter[0]) | (onescounter[3] & ~onescounter[2] & ~onescounter[1] & ~onescounter[0]) | (onescounter[3] & ~onescounter[2] & ~onescounter[1] & onescounter[0]) | (onescounter[3] & ~onescounter[2] & onescounter[1] & onescounter[0]) | (onescounter[3] & onescounter[2] & ~onescounter[1] & ~onescounter[0]) | (onescounter[3] & onescounter[2] & ~onescounter[1] & onescounter[0]) | (onescounter[3] & onescounter[2] & onescounter[1] & ~onescounter[0]) | (~onescounter[3] & ~onescounter[2] & ~onescounter[1] & ~onescounter[0]));
	HEX0VALUE[4] = ~((~onescounter[3] & ~onescounter[2] & onescounter[1] & ~onescounter[0]) | (~onescounter[3] & onescounter[2] & onescounter[1] & ~onescounter[0]) | (onescounter[3] & ~onescounter[2] & ~onescounter[1] & ~onescounter[0]) | (onescounter[3] & ~onescounter[2] & onescounter[1] & ~onescounter[0]) | (onescounter[3] & ~onescounter[2] & onescounter[1] & onescounter[0]) | (onescounter[3] & onescounter[2] & ~onescounter[1] & ~onescounter[0]) | (onescounter[3] & onescounter[2] & ~onescounter[1] & onescounter[0]) | (onescounter[3] & onescounter[2] & onescounter[1] & ~onescounter[0]) | (onescounter[3] & onescounter[2] & onescounter[1] & onescounter[0]) | (~onescounter[3] & ~onescounter[2] & ~onescounter[1] & ~onescounter[0]));
	HEX0VALUE[5] = ~((~onescounter[3] & onescounter[2] & ~onescounter[1] & ~onescounter[0]) | (~onescounter[3] & onescounter[2] & ~onescounter[1] & onescounter[0]) | (~onescounter[3] & onescounter[2] & onescounter[1] & ~onescounter[0]) | (onescounter[3] & ~onescounter[2] & ~onescounter[1] & ~onescounter[0]) | (onescounter[3] & ~onescounter[2] & ~onescounter[1] & onescounter[0]) | (onescounter[3] & ~onescounter[2] & onescounter[1] & ~onescounter[0]) | (onescounter[3] & ~onescounter[2] & onescounter[1] & onescounter[0]) | (onescounter[3] & onescounter[2] & ~onescounter[1] & ~onescounter[0]) | (onescounter[3] & onescounter[2] & onescounter[1] & ~onescounter[0]) | (onescounter[3] & onescounter[2] & onescounter[1] & onescounter[0]) | (~onescounter[3] & ~onescounter[2] & ~onescounter[1] & ~onescounter[0]));
	HEX0VALUE[6] = (~onescounter[3] & ~onescounter[2] & ~onescounter[1]) | (~onescounter[3] & onescounter[2] & onescounter[1] & onescounter[0]) | (onescounter[3] & onescounter[2] & ~onescounter[1] & ~onescounter[0]);
	HEX0VALUE[7] = 1;

	HEX1VALUE[0] = ~((~tenscounter[3] & ~tenscounter[2] & tenscounter[1] & ~tenscounter[0]) | (~tenscounter[3] & ~tenscounter[2] & tenscounter[1] & tenscounter[0]) | (~tenscounter[3] & tenscounter[2] & ~tenscounter[1] & tenscounter[0]) | (~tenscounter[3] & tenscounter[2] & tenscounter[1] & ~tenscounter[0]) | (~tenscounter[3] & tenscounter[2] & tenscounter[1] & tenscounter[0]) | (tenscounter[3] & ~tenscounter[2] & ~tenscounter[1] & ~tenscounter[0]) | (tenscounter[3] & ~tenscounter[2] & ~tenscounter[1] & tenscounter[0]) | (tenscounter[3] & ~tenscounter[2] & tenscounter[1] & ~tenscounter[0]) | (tenscounter[3] & tenscounter[2] & ~tenscounter[1] & ~tenscounter[0]) | (tenscounter[3] & tenscounter[2] & tenscounter[1] & ~tenscounter[0]) | (tenscounter[3] & tenscounter[2] & tenscounter[1] & tenscounter[0]));
	HEX1VALUE[1] = ~((~tenscounter[3] & ~tenscounter[2] & ~tenscounter[1] & tenscounter[0]) | (~tenscounter[3] & ~tenscounter[2] & tenscounter[1] & ~tenscounter[0]) | (~tenscounter[3] & ~tenscounter[2] & tenscounter[1] & tenscounter[0]) | (~tenscounter[3] & tenscounter[2] & ~tenscounter[1] & ~tenscounter[0]) | (~tenscounter[3] & tenscounter[2] & tenscounter[1] & tenscounter[0]) | (tenscounter[3] & ~tenscounter[2] & ~tenscounter[1] & ~tenscounter[0]) | (tenscounter[3] & ~tenscounter[2] & ~tenscounter[1] & tenscounter[0]) | (tenscounter[3] & ~tenscounter[2] & tenscounter[1] & ~tenscounter[0]) | (tenscounter[3] & tenscounter[2] & ~tenscounter[1] & tenscounter[0]));
	HEX1VALUE[2] = ~((~tenscounter[3] & ~tenscounter[2] & ~tenscounter[1] & tenscounter[0]) | (~tenscounter[3] & ~tenscounter[2] & tenscounter[1] & tenscounter[0]) | (~tenscounter[3] & tenscounter[2] & ~tenscounter[1] & ~tenscounter[0]) | (~tenscounter[3] & tenscounter[2] & ~tenscounter[1] & tenscounter[0]) | (~tenscounter[3] & tenscounter[2] & tenscounter[1] & ~tenscounter[0]) | (~tenscounter[3] & tenscounter[2] & tenscounter[1] & tenscounter[0]) | (tenscounter[3] & ~tenscounter[2] & ~tenscounter[1] & ~tenscounter[0]) | (tenscounter[3] & ~tenscounter[2] & ~tenscounter[1] & tenscounter[0]) | (tenscounter[3] & ~tenscounter[2] & tenscounter[1] & ~tenscounter[0]) | (tenscounter[3] & ~tenscounter[2] & tenscounter[1] & tenscounter[0]) | (tenscounter[3] & tenscounter[2] & ~tenscounter[1] & tenscounter[0]));	
	HEX1VALUE[3] = ~((~tenscounter[3] & ~tenscounter[2] & tenscounter[1] & ~tenscounter[0]) | (~tenscounter[3] & ~tenscounter[2] & tenscounter[1] & tenscounter[0]) | (~tenscounter[3] & tenscounter[2] & ~tenscounter[1] & tenscounter[0]) | (~tenscounter[3] & tenscounter[2] & tenscounter[1] & ~tenscounter[0]) | (tenscounter[3] & ~tenscounter[2] & ~tenscounter[1] & ~tenscounter[0]) | (tenscounter[3] & ~tenscounter[2] & ~tenscounter[1] & tenscounter[0]) | (tenscounter[3] & ~tenscounter[2] & tenscounter[1] & tenscounter[0]) | (tenscounter[3] & tenscounter[2] & ~tenscounter[1] & ~tenscounter[0]) | (tenscounter[3] & tenscounter[2] & ~tenscounter[1] & tenscounter[0]) | (tenscounter[3] & tenscounter[2] & tenscounter[1] & ~tenscounter[0]));
	HEX1VALUE[4] = ~((~tenscounter[3] & ~tenscounter[2] & tenscounter[1] & ~tenscounter[0]) | (~tenscounter[3] & tenscounter[2] & tenscounter[1] & ~tenscounter[0]) | (tenscounter[3] & ~tenscounter[2] & ~tenscounter[1] & ~tenscounter[0]) | (tenscounter[3] & ~tenscounter[2] & tenscounter[1] & ~tenscounter[0]) | (tenscounter[3] & ~tenscounter[2] & tenscounter[1] & tenscounter[0]) | (tenscounter[3] & tenscounter[2] & ~tenscounter[1] & ~tenscounter[0]) | (tenscounter[3] & tenscounter[2] & ~tenscounter[1] & tenscounter[0]) | (tenscounter[3] & tenscounter[2] & tenscounter[1] & ~tenscounter[0]) | (tenscounter[3] & tenscounter[2] & tenscounter[1] & tenscounter[0]));
	HEX1VALUE[5] = ~((~tenscounter[3] & tenscounter[2] & ~tenscounter[1] & ~tenscounter[0]) | (~tenscounter[3] & tenscounter[2] & ~tenscounter[1] & tenscounter[0]) | (~tenscounter[3] & tenscounter[2] & tenscounter[1] & ~tenscounter[0]) | (tenscounter[3] & ~tenscounter[2] & ~tenscounter[1] & ~tenscounter[0]) | (tenscounter[3] & ~tenscounter[2] & ~tenscounter[1] & tenscounter[0]) | (tenscounter[3] & ~tenscounter[2] & tenscounter[1] & ~tenscounter[0]) | (tenscounter[3] & ~tenscounter[2] & tenscounter[1] & tenscounter[0]) | (tenscounter[3] & tenscounter[2] & ~tenscounter[1] & ~tenscounter[0]) | (tenscounter[3] & tenscounter[2] & tenscounter[1] & ~tenscounter[0]) | (tenscounter[3] & tenscounter[2] & tenscounter[1] & tenscounter[0]));
	HEX1VALUE[6] = (~tenscounter[3] & ~tenscounter[2] & ~tenscounter[1]) | (~tenscounter[3] & tenscounter[2] & tenscounter[1] & tenscounter[0]) | (tenscounter[3] & tenscounter[2] & ~tenscounter[1] & ~tenscounter[0]);
	HEX1VALUE[7] = 1;	
		 
end

////==========================================================================================================//

// assigns displays values to the HEX displays itself

assign HEX5 = HEX5VALUE;
assign HEX4 = HEX4VALUE;
assign HEX3 = HEX3VALUE;
assign HEX2 = HEX2VALUE;

assign HEX1 = HEX1VALUE;
assign HEX0 = HEX0VALUE;
assign LEDR = LEDROUTPUT;

endmodule

